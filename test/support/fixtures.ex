defmodule Membrane.Element.MPEG.TS.Support.Fixtures do
  @moduledoc false
  # values in this module are in hex so they can be easily validated with attached test media
  def pat, do: <<0x00, 0x01, 0xF0, 0x00>>

  def pat_payload do
    <<0x00, 0xB0, 0x0D, 0x00, 0x01, 0xC1, 0x00, 0x00>> <> pat() <> <<0x2A, 0xB1, 0x04, 0xB2>>
  end

  def pat_packet do
    <<0x47, 0x40, 0x00, 0x10, 0x0>>
    |> Kernel.<>(pat_payload())
    |> add_padding()
  end

  def pmt do
    <<0xE1, 0x00, 0xF0, 0x00, 0x1B, 0xE1, 0x00, 0xF0, 0x00, 0x03, 0xE1, 0x01, 0xF0, 0x00>>
  end

  def pmt_payload do
    <<0x02, 0xB0, 0x17, 0x00, 0x01, 0xC1, 0x00, 0x00, 0xE1, 0x00, 0xF0, 0x00, 0x1B, 0xE1, 0x00,
      0xF0, 0x00, 0x03, 0xE1, 0x01, 0xF0, 0x00, 0x4E, 0x59, 0x3D, 0x1E>>
  end

  def pmt_packet() do
    <<0x47, 0x50, 0x00, 0x10>>
    |> Kernel.<>(null_pointer())
    |> Kernel.<>(pmt_payload())
    |> add_padding()
  end

  def data_packet(pid, payload, options \\ []) do
    adaptation_field = <<0x50, 0x00, 0x00, 0x7B, 0x0C, 0x7E, 0x00>>

    <<
      0x47::8,
      0b010::3,
      pid::13,
      Keyword.get(options, :scrambling, 0b00)::2,
      Keyword.get(options, :adaptation_field_control, 0b11)::2,
      Keyword.get(options, :continuity, 0b0000)::4,
      Keyword.get(options, :adaptation_size, byte_size(adaptation_field))::8
    >>
    |> Kernel.<>(adaptation_field)
    |> Kernel.<>(Keyword.get(options, :pes_data, <<1::24, 1::8, 0::16>>))
    |> Kernel.<>(payload)
    |> add_padding()
  end

  def data_packet_video do
    <<0x47, 0x41, 0x00, 0x30, 0x07, 0x50, 0x00, 0x00, 0x7B, 0x0C, 0x7E, 0x00, 0x00, 0x00, 0x01,
      0xE0, 0x00, 0x00, 0x80, 0xC0, 0x0A, 0x31, 0x00, 0x09, 0x12, 0xF9, 0x11, 0x00, 0x07, 0xD8,
      0x61, 0x00, 0x00, 0x00, 0x01, 0x09, 0xF0, 0x00, 0x00, 0x00, 0x01, 0x67, 0x64, 0x00, 0x28,
      0xAC, 0xD9, 0x40, 0x78, 0x02, 0x27, 0xE5, 0xC0, 0x44, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00,
      0x00, 0x03, 0x00, 0xC0, 0x3C, 0x60, 0xC6, 0x58, 0x00, 0x00, 0x00, 0x01, 0x68, 0xEB, 0xE3,
      0xCB, 0x22, 0xC0, 0x00, 0x00, 0x01, 0x06, 0x05, 0xFF, 0xFF, 0xAA, 0xDC, 0x45, 0xE9, 0xBD,
      0xE6, 0xD9, 0x48, 0xB7, 0x96, 0x2C, 0xD8, 0x20, 0xD9, 0x23, 0xEE, 0xEF, 0x78, 0x32, 0x36,
      0x34, 0x20, 0x2D, 0x20, 0x63, 0x6F, 0x72, 0x65, 0x20, 0x31, 0x35, 0x32, 0x20, 0x72, 0x32,
      0x38, 0x35, 0x34, 0x20, 0x65, 0x39, 0x61, 0x35, 0x39, 0x30, 0x33, 0x20, 0x2D, 0x20, 0x48,
      0x2E, 0x32, 0x36, 0x34, 0x2F, 0x4D, 0x50, 0x45, 0x47, 0x2D, 0x34, 0x20, 0x41, 0x56, 0x43,
      0x20, 0x63, 0x6F, 0x64, 0x65, 0x63, 0x20, 0x2D, 0x20, 0x43, 0x6F, 0x70, 0x79, 0x6C, 0x65,
      0x66, 0x74, 0x20, 0x32, 0x30, 0x30, 0x33, 0x2D, 0x32, 0x30, 0x31, 0x37, 0x20, 0x2D, 0x20,
      0x68, 0x74, 0x74, 0x70, 0x3A, 0x2F, 0x2F, 0x77>>
  end

  defp null_pointer do
    <<0x00>>
  end

  defp add_padding(packet) do
    packet <> padding_for(packet)
  end

  defp padding_for(packet) do
    for _ <- 1..(188 - byte_size(packet)) do
      <<255>>
    end
    |> Enum.join()
  end
end
