defmodule Membrane.Element.MpegTS.Support.Fixtures do
  # values in this module are in hex so they can be easily validated with attached test media
  def pat, do: <<0x00, 0x01, 0xF0, 0x00>>

  def pat_payload do
    <<0x00, 0xB0, 0x0D, 0x00, 0x01, 0xC1, 0x00, 0x00>> <> pat() <> <<0x2A, 0xB1, 0x04, 0xB2>>
  end

  def pat_packet do
    <<0x47, 0x40, 0x00, 0x10, 0x0>>
    |> Kernel.<>(pat_payload())
    |> add_padding()
  end

  def pmt do
    <<0xE1, 0x00, 0xF0, 0x00, 0x1B, 0xE1, 0x00, 0xF0, 0x00, 0x03, 0xE1, 0x01, 0xF0, 0x00>>
  end

  def pmt_payload do
    <<0x02, 0xB0, 0x17, 0x00, 0x01, 0xC1, 0x00, 0x00, 0xE1, 0x00, 0xF0, 0x00, 0x1B, 0xE1, 0x00,
      0xF0, 0x00, 0x03, 0xE1, 0x01, 0xF0, 0x00, 0x4E, 0x59, 0x3D, 0x1E>>
  end

  def pmt_packet() do
    <<0x47, 0x50, 0x00, 0x10>>
    |> Kernel.<>(null_pointer())
    |> Kernel.<>(pmt_payload())
    |> add_padding()
  end

  def data_packet(pid, payload) do
    adaptation_field = <<0x50, 0x00, 0x00, 0x7B, 0x0C, 0x7E, 0x00>>

    <<
      0x47::8,
      0b010::3,
      pid::13,
      0b00110000::8,
      byte_size(adaptation_field)::8
    >>
    |> Kernel.<>(adaptation_field)
    |> Kernel.<>(<<1::24, 1::8, 0::16>>)
    |> Kernel.<>(payload)
    |> add_padding()
  end

  defp null_pointer do
    <<0x00>>
  end

  defp add_padding(packet) do
    packet <> padding_for(packet)
  end

  defp padding_for(packet) do
    for _ <- 1..(188 - byte_size(packet)) do
      <<0x255>>
    end
    |> Enum.join()
  end
end
